오픈소스 커뮤니티

성공적인 OSS 프로젝트의 주변에는 폭넓은 사람들의 참여를 기반으로 한 커뮤니티가 형성되어 있다. 이 활발한 그룹의 특징은 다양한 역할, 능력, 참여 정도, 책임감을 가진 멤버들로 구성되어 있다는 것이다. 

1)이해당사자들
OSS개발 시에 요구되는 분산되고 집단적인 프로세스의 결과로 나타나는 애드혹(Adhoc)팀 유형의 특징과 커뮤니티의 구조에 대한 연구들이 진행되었는데, 이러한 연구들의 대부분에서 나타나는 두드러진 커뮤니티 구조는 이른바 양파모델(Onion Model)이다. 양파모델에서는 프로젝트 개발 팀이 원의 중심부에 자리잡고 있는데, 원의 가장 안쪽에 자리잡고 있는 것은 관리와 리더쉽을 발휘하는 역할의 개발자들이다. 반면, 바깥똑에 자리 할수록 프로젝트를 컨트롤 할 수 있는 힘이 점점 줄어든다. 또한, 커뮤니티는 구성원들이 커뮤니티에서 맡은 역할을 격상시키는 프로모션 전략도 가지고 있다. 그림1은 양파 모델의 프로젝트 조직에 관해 보다 상세한 정보를 보여준다. 이그림은 OSS 프로젝트 커뮤니티의 전형적인 구조, 주요 이해당사자(Actor)들, 그리고 이들이 그룹화되는 방법과 수행할 책임에 대해 분석한 것이다. 이러한 책임과 역할의 세분화는 염격한 계층적 조직과 같은 인상을 줄수 있지만, OSS커뮤니티에서는 오히려 자연스런 분업의 확장으로 인식되고 있다.
이프로젝트 커뮤니티들의 코어 멤버(Core Members) 및 액티브 멤버(Active Members)의 규모는 상당히 다양하다. 한 사람이 수행하는 프로젝트부터 수백 명의 액티브 멤버들이 참여하는 프로젝트까지 다양한 규모로 이루어져 있다. 그러나 코어 멤버의 수는 일반적으로 페리페럴 멤버(Peripheral Members)의 수보다 훨씬 적다. 온라인 저장소에서 추출한 데이터를  기반으로 하는 아파치, 리눅스, 모질라, 그리고 그놈(Gnome)같은 대규모의 OSS 프로젝트에 대한 연구들에서 이러한 경험적 증거를 찾을 수 있다.
OSS 프로젝트 커뮤니티의 주요 이해 당사자들(Actors)은 코어(Core,핵심 멤버),액티브(Active,주요 활동 멤버),페리페럴(Peripheral, 주변 멤버), 그리고 그들의 주요 역할들과 책임으로 그룹화 된다. 거기에 다운로드와 사용을 통해 프로젝트에 동기를 부여하는 패시브 유저(Passive Users, 일반 사용자)들까지 더하여 전체적인 프로젝트 커뮤니티를 완성한다. 












aodaod
2)리더쉽
OSS 프로젝트 커뮤니티는 거버넌스와 대부분의 리더쉽 구조에 의해 조직되고 이끌어진다.

(1)리더쉽모델
OSS프로젝트의 광범위한 특성에도 불구하고, 종종 그들의 커뮤니티에서는 명확하게 정의되고 잘 조직된 거버넌스 모델들을 찾을 수 있다. 거버넌스 모델은 광의적인 범주에서 군주제오 연방제로 구분된다.

-군주제(Monarchical)-
군주제 또는 ‘스타형(star-shaped)’ 리더쉽 모델에서는 프로젝트의 초기 주도자(Inspirer)와 소유자(Owner)가 핵심적인 역할을 유지하고, 전체적인 프로젝트는 이들의 결정과 비젼에 따른다. 군주제 모델 중 하나가 계층적 모델이다. 리눅스 커널과 같은 큰 프로젝트에서, 리더는 빠른 작업 회전율을 촉진하기 위하여, 그 권한을 선택된 코어 팀 멤버들의 그룹에게 이전한다. 이러한 경우 리더쉽 모델은 군사조직과 유사하다. 잘 알려진 예로, 리눅스 프로젝트의 리누스 토발즈와 펄 프로젝트의 래리월(Larry Wall)이 있다. 이들은 종종 ‘자비로운 독제자들’이라고 불리어진다.

-연방제(Federal)-
연방제 리더쉽 모델에서는, 프로젝트의 코어 멤버들 사이에서 책임이 더 ‘민주적’으로 분산된다. 프리BSD,아파치 그룹, 데비안 프로젝트 리더와 주변 관리자들로 구성된 데비안 코어(Debian’s Core Team)이 이러한 예이다.
프로젝트가 성숙해지거나 새로운 요구사항들이 발생함으로써, 프로젝트의 리더쉽 모델은 진화한다. 프로젝트 소스 코드의 구조 또한 개발자가 프로젝트의 리더로 격상할 수 있는 가능성에 중요한 영향을 미친다.

(2)스킬
프로젝트 리더쉽은 형성된 기여도의 중요성 뿐만 아니라 기술적 능력, 지식, 프로젝트 목표에 대한 헌신과 같은 요소들을 근거로 하여, 능력 중시의 프로세스를 통해 자연스럽게 발생한다. 군주제 모델에서, 리더는 프로젝트 커뮤니티를 창출하는 데에 필요한 뛰어난 관리능력으로 인정을 받는다. 그 결과 신뢰와 존중의 리더쉽이 팀 형성 과정에 반영된다. 실질적인 측면에서는 평판과 동료 평가 프로세스가 모두 사용된다.  이 프로세스에서는 코드 기여와 참여에 대한 다른 개발자들의 평가가 반영된다. 
많은 OSS 프로젝트들로부터 입증된 바와 같이, 프로젝트의 코어 멤버가 되기 위한 중요한 전제조건은 공정성(Fairness)의 인식과 신뢰성(Trustworthiness), 자아 중심적 또는 정치적 편견이 없는 헌신성, 그리고 프로젝트에 대한 활발한 참여와 오랜 시간동안의 기여를 포함한다. 파우라(Paola Giuri)와 그녀의 동료들은 역할, 스킬 프로파일 및 소스포지의 OSS프로젝트에 등록된 개인의 활동에 대한 경험적 연구를 통해 기술과 사회/리더쉽 스킬 사이의 균형이 매우 중요하다는 것을 발견했다. 그럼에도 불구하고, 전적으로 기술적 스킬과 재능은 어떤 경우에서든 더 비중있게 작용하였다. 한편, 좋은 커뮤니케이션과 사회적 스킬도 중요하다. 이는 프로젝트의 비젼과 목표에 대한 의사소통을 명확히 하고, 새로운 멤버를 프로젝트에 끌어들이며, 자금 조달 및 지원을 안정적으로 보장하는 등 ‘강제적이지 않은 리더쉽’을 가능하게 해준다.

(3)구조
OSS프로젝트의 조직은 강제성을 띠지 않고, 개발자들이 지리적으로 분산되어 있으며, 직접 자주 만나지 못하는 특성을 가지고 있다. 따라서 , OSS프로젝트의 조직 구조는 프로젝트에 내재된 수평적이며, 자유롭고, 무정부주의적인 특성과 프로젝트 커뮤니티에 으해 동의되고 부과된, 명확한 계층적, 체계적 리더쉽 모델의 결합 또는 충돌로 이루어진다.
조직적 경계는 전통적인 조직과는 다르게, 모든 사람들에게 열려 있으며 멤버쉽은 유동적이다. 그렇게 때문에 새로운 기여자의 참여, ‘수평적 혁신 네트워크’의 형성, 지속적인 혁신 아이디어와 미래지향적 관점의 유입이 가능하다.
마지막으로, 거버넌스 구조가 어떻게 정의되고 이행되든 간에 시간의 흐름에 따라, 프로젝트 진화의 필요성에 따라, 그리고 개인들의 행동에 따라 변화할 가능성이 있다.











3)거버넌스 프로세스

(1)멤버쉽 승인
OSS프로젝트의 멤버쉽은 모두에게 열려있다. 그러나 코어 팀 뿐만 아니라, 다양한 기술 그룹 또는 거버넌스 그룹에 대한 가입의 승인과 참여 수준의 관리는 프로젝트의 코어 멤버나 지정된 그룹에 의해 다루어진다. 이 그룹들은 그들의 기여와 스킬에 대한 평가에 기반해서 멤버를 승인하는 전체적인 권한을 가지고 있으며, 대개 투표 또는 합의 절차를 거친다. 더 극단적인 경우, 멤버들은 그들의 무례한 행동을 했다고 판단되면 강등 또는 방출될 수있다.

(2)멤버쉽 프로모션
커뮤니티 멤버쉽에 있어서 절차와 요구조건을 정해 놓은 프로젝트들은 일반적으로 개발 팀 멤버들에 대한 승격 또는 강등 규칙을 함께 공지하고 있다. 이러한 규칙들은 일정한 기간동안 적극적으로 소스코드 저장소에 기여하고 커뮤니티가 중요하다고 판단하는 작업 결과물을 프로젝트 멤버들에게 제시할 것을 요구한다. 그리고 마지막으로, 프로젝트의 관리위원회에 들어가기 위해서는 오랫동안 두각을 나타내야만 한다.

(3)분업
분업을 할 때에는 개발자들에게 각기 다른 작업을 할당한다. 프로젝트와 커뮤니티의 개방적이고 자발적인 특성 때문에, 이 과정은 종종 상충될 수 있는 다양한 고려사항들의 균형을 유지하기 위한 노력이 필요하다.
개발자의 개인적 선호는 가능하면 최대한 고려되고 존중된다. 개발자들은 하양 오픈 소스에 대한 작업을 선택할 수 있지만, 요청되지 않거나 원치 않는 기요는 받아들여지지 않을 수도 잇다. 개발자들의 전문 기술과 영역도 중요하지만, 필요로 하는 작업에 이를 적절히 결합시키는 것이 더욱 중요하다. 
스테판 코흐(Stefan Koch)와 게오로크 슈나이더(Georg Schneider)는 ‘그놈 프로젝트’의 CVS 저장소에서 추출된 데이터를 통해 적은 수의 개발자들이 종종 같은 파일에서 작업하는 것을 발견했는데, 이것을 높은 수준의 분업으로 정의하였다. ‘자기조직화 이론’에 의해 영감을 받은 ‘사회 연결망(Stigmergic) 이론’은  이러한 분업 현상을 다음과 같이 설명한다.

-커뮤니티의 조직 구조는 ‘사회 연결망’ 또는 코드 베이스 내의 신호에 반응하여 형성된다.
-(자연스레 형성되는)개발자들의 계층이 프로젝트의 계층적구조로 표출된다.

개발자들이 부족한 커뮤니티는 시들어 죽게 된다. 이것은 일반적으로 OSS 프로젝트들에서 ‘말 대신 코드를 보여달라(Put your code where your mouth is)’ 또는 ‘닥치고 코드(Shut up and code)’와 같은 구문들을 통해 표현된다. 

(4)기술적 의사 결정
프로젝트 코드와 관련된 가장 중요한 결정들은 코어 개발팀에 의해 이루어진다. 이와 같은 결정들은 미래의 릴리스(Release)에 무엇을 포함할 것인지, 아키텍처 이슈들과 중요한 버그들을 어떻게 다룰 것인지 등과 같은 코드 개발 방향에 관한 것들이다.
이러한 결정들은 투표와 합의의 과정을 통해 수행된다. 보통 어떠한 개발자라도 투표를 하거나 의견을 표명 할 수 있지만, 오직 코어 그룹이 투표한 것들만 법적 구속력을 갖는다. 물론 코드의 특정한 부분에 참여하는 ‘소유자’가 되어 코어 팀이 결정한 것에 동의하지 않을 경우, 이러한 결정은 ‘불화(Disagreement)’로 이어질 수 있다.
이경우, 소유자들이 그들의 의견을 채택하도록 코어 팀에 압력을 행사하라고 할 수도 있지만, 실패할 경우 그들은 프로젝트를 시작할 수도 있다. 이것을 소위 ‘분기(Forking)’라고 하는데, OSS 프로젝트에서 직면하는 위험 중 하나이다.

4)진화
프로젝트 개발 커뮤니티의 적절한 크기에 대하여 여러가지 상반되는 이론들이 있다. ‘뱃사공이 많으면 배가 산으로 간다(Too many cooks spoil the broth)’ 와 같은 부정적인 시각을 가진 사람들이 있는 반면, ‘보는 눈이 많다면, 찾는 버그도 많아진다(Given enough eyeballs, all bugs are shallow)’라고 믿는 사람들도 있다. 일반적으로 개발자의 인원 증가는 생산성의 증가와 비례하지는 않지만, 코흐(Koch)의 연구들에 따르면 작든 크든, 프로젝트가 성공적이든 실패하든, 프로그래머가 버전 컨트롤 데이터를 사용하든 아니든 간에,  OSS프로젝트들에 있어 참여자수가 많다는 것은 일반적으로 이익이 된다는 것을 알 수 있다.

